module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateApplication {
  count: Int!
}

type AggregateClub {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateRoom {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Application {
  id: ID!
  userId: ID!
  clubId: ID!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  answer: [String!]!
  checked: Boolean!
  isPass: Boolean
}

type ApplicationConnection {
  pageInfo: PageInfo!
  edges: [ApplicationEdge]!
  aggregate: AggregateApplication!
}

input ApplicationCreateanswerInput {
  set: [String!]
}

input ApplicationCreateInput {
  id: ID
  userId: ID!
  clubId: ID!
  questions: QuestionCreateManyInput
  answer: ApplicationCreateanswerInput
  checked: Boolean!
  isPass: Boolean
}

input ApplicationCreateManyInput {
  create: [ApplicationCreateInput!]
  connect: [ApplicationWhereUniqueInput!]
}

type ApplicationEdge {
  node: Application!
  cursor: String!
}

enum ApplicationOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  clubId_ASC
  clubId_DESC
  checked_ASC
  checked_DESC
  isPass_ASC
  isPass_DESC
}

type ApplicationPreviousValues {
  id: ID!
  userId: ID!
  clubId: ID!
  answer: [String!]!
  checked: Boolean!
  isPass: Boolean
}

input ApplicationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  clubId: ID
  clubId_not: ID
  clubId_in: [ID!]
  clubId_not_in: [ID!]
  clubId_lt: ID
  clubId_lte: ID
  clubId_gt: ID
  clubId_gte: ID
  clubId_contains: ID
  clubId_not_contains: ID
  clubId_starts_with: ID
  clubId_not_starts_with: ID
  clubId_ends_with: ID
  clubId_not_ends_with: ID
  checked: Boolean
  checked_not: Boolean
  isPass: Boolean
  isPass_not: Boolean
  AND: [ApplicationScalarWhereInput!]
  OR: [ApplicationScalarWhereInput!]
  NOT: [ApplicationScalarWhereInput!]
}

type ApplicationSubscriptionPayload {
  mutation: MutationType!
  node: Application
  updatedFields: [String!]
  previousValues: ApplicationPreviousValues
}

input ApplicationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ApplicationWhereInput
  AND: [ApplicationSubscriptionWhereInput!]
  OR: [ApplicationSubscriptionWhereInput!]
  NOT: [ApplicationSubscriptionWhereInput!]
}

input ApplicationUpdateanswerInput {
  set: [String!]
}

input ApplicationUpdateDataInput {
  userId: ID
  clubId: ID
  questions: QuestionUpdateManyInput
  answer: ApplicationUpdateanswerInput
  checked: Boolean
  isPass: Boolean
}

input ApplicationUpdateInput {
  userId: ID
  clubId: ID
  questions: QuestionUpdateManyInput
  answer: ApplicationUpdateanswerInput
  checked: Boolean
  isPass: Boolean
}

input ApplicationUpdateManyDataInput {
  userId: ID
  clubId: ID
  answer: ApplicationUpdateanswerInput
  checked: Boolean
  isPass: Boolean
}

input ApplicationUpdateManyInput {
  create: [ApplicationCreateInput!]
  update: [ApplicationUpdateWithWhereUniqueNestedInput!]
  upsert: [ApplicationUpsertWithWhereUniqueNestedInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
}

input ApplicationUpdateManyMutationInput {
  userId: ID
  clubId: ID
  answer: ApplicationUpdateanswerInput
  checked: Boolean
  isPass: Boolean
}

input ApplicationUpdateManyWithWhereNestedInput {
  where: ApplicationScalarWhereInput!
  data: ApplicationUpdateManyDataInput!
}

input ApplicationUpdateWithWhereUniqueNestedInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateDataInput!
}

input ApplicationUpsertWithWhereUniqueNestedInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateDataInput!
  create: ApplicationCreateInput!
}

input ApplicationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  clubId: ID
  clubId_not: ID
  clubId_in: [ID!]
  clubId_not_in: [ID!]
  clubId_lt: ID
  clubId_lte: ID
  clubId_gt: ID
  clubId_gte: ID
  clubId_contains: ID
  clubId_not_contains: ID
  clubId_starts_with: ID
  clubId_not_starts_with: ID
  clubId_ends_with: ID
  clubId_not_ends_with: ID
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  checked: Boolean
  checked_not: Boolean
  isPass: Boolean
  isPass_not: Boolean
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
}

input ApplicationWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type Club {
  id: ID!
  master: User!
  questuons(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  name: String!
  bio: String!
  description: String!
  logo: String
  clubImage: File
  type: String!
  socialUrl: String
  socialDisplay: Boolean
}

type ClubConnection {
  pageInfo: PageInfo!
  edges: [ClubEdge]!
  aggregate: AggregateClub!
}

input ClubCreateInput {
  id: ID
  master: UserCreateOneWithoutIsMasterInput!
  questuons: QuestionCreateManyWithoutOwnerInput
  applications: ApplicationCreateManyInput
  name: String!
  bio: String!
  description: String!
  logo: String
  clubImage: FileCreateOneWithoutClubInput
  type: String!
  socialUrl: String
  socialDisplay: Boolean
}

input ClubCreateOneWithoutClubImageInput {
  create: ClubCreateWithoutClubImageInput
  connect: ClubWhereUniqueInput
}

input ClubCreateOneWithoutMasterInput {
  create: ClubCreateWithoutMasterInput
  connect: ClubWhereUniqueInput
}

input ClubCreateOneWithoutQuestuonsInput {
  create: ClubCreateWithoutQuestuonsInput
  connect: ClubWhereUniqueInput
}

input ClubCreateWithoutClubImageInput {
  id: ID
  master: UserCreateOneWithoutIsMasterInput!
  questuons: QuestionCreateManyWithoutOwnerInput
  applications: ApplicationCreateManyInput
  name: String!
  bio: String!
  description: String!
  logo: String
  type: String!
  socialUrl: String
  socialDisplay: Boolean
}

input ClubCreateWithoutMasterInput {
  id: ID
  questuons: QuestionCreateManyWithoutOwnerInput
  applications: ApplicationCreateManyInput
  name: String!
  bio: String!
  description: String!
  logo: String
  clubImage: FileCreateOneWithoutClubInput
  type: String!
  socialUrl: String
  socialDisplay: Boolean
}

input ClubCreateWithoutQuestuonsInput {
  id: ID
  master: UserCreateOneWithoutIsMasterInput!
  applications: ApplicationCreateManyInput
  name: String!
  bio: String!
  description: String!
  logo: String
  clubImage: FileCreateOneWithoutClubInput
  type: String!
  socialUrl: String
  socialDisplay: Boolean
}

type ClubEdge {
  node: Club!
  cursor: String!
}

enum ClubOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  bio_ASC
  bio_DESC
  description_ASC
  description_DESC
  logo_ASC
  logo_DESC
  type_ASC
  type_DESC
  socialUrl_ASC
  socialUrl_DESC
  socialDisplay_ASC
  socialDisplay_DESC
}

type ClubPreviousValues {
  id: ID!
  name: String!
  bio: String!
  description: String!
  logo: String
  type: String!
  socialUrl: String
  socialDisplay: Boolean
}

type ClubSubscriptionPayload {
  mutation: MutationType!
  node: Club
  updatedFields: [String!]
  previousValues: ClubPreviousValues
}

input ClubSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClubWhereInput
  AND: [ClubSubscriptionWhereInput!]
  OR: [ClubSubscriptionWhereInput!]
  NOT: [ClubSubscriptionWhereInput!]
}

input ClubUpdateInput {
  master: UserUpdateOneRequiredWithoutIsMasterInput
  questuons: QuestionUpdateManyWithoutOwnerInput
  applications: ApplicationUpdateManyInput
  name: String
  bio: String
  description: String
  logo: String
  clubImage: FileUpdateOneWithoutClubInput
  type: String
  socialUrl: String
  socialDisplay: Boolean
}

input ClubUpdateManyMutationInput {
  name: String
  bio: String
  description: String
  logo: String
  type: String
  socialUrl: String
  socialDisplay: Boolean
}

input ClubUpdateOneRequiredWithoutClubImageInput {
  create: ClubCreateWithoutClubImageInput
  update: ClubUpdateWithoutClubImageDataInput
  upsert: ClubUpsertWithoutClubImageInput
  connect: ClubWhereUniqueInput
}

input ClubUpdateOneRequiredWithoutQuestuonsInput {
  create: ClubCreateWithoutQuestuonsInput
  update: ClubUpdateWithoutQuestuonsDataInput
  upsert: ClubUpsertWithoutQuestuonsInput
  connect: ClubWhereUniqueInput
}

input ClubUpdateOneWithoutMasterInput {
  create: ClubCreateWithoutMasterInput
  update: ClubUpdateWithoutMasterDataInput
  upsert: ClubUpsertWithoutMasterInput
  delete: Boolean
  disconnect: Boolean
  connect: ClubWhereUniqueInput
}

input ClubUpdateWithoutClubImageDataInput {
  master: UserUpdateOneRequiredWithoutIsMasterInput
  questuons: QuestionUpdateManyWithoutOwnerInput
  applications: ApplicationUpdateManyInput
  name: String
  bio: String
  description: String
  logo: String
  type: String
  socialUrl: String
  socialDisplay: Boolean
}

input ClubUpdateWithoutMasterDataInput {
  questuons: QuestionUpdateManyWithoutOwnerInput
  applications: ApplicationUpdateManyInput
  name: String
  bio: String
  description: String
  logo: String
  clubImage: FileUpdateOneWithoutClubInput
  type: String
  socialUrl: String
  socialDisplay: Boolean
}

input ClubUpdateWithoutQuestuonsDataInput {
  master: UserUpdateOneRequiredWithoutIsMasterInput
  applications: ApplicationUpdateManyInput
  name: String
  bio: String
  description: String
  logo: String
  clubImage: FileUpdateOneWithoutClubInput
  type: String
  socialUrl: String
  socialDisplay: Boolean
}

input ClubUpsertWithoutClubImageInput {
  update: ClubUpdateWithoutClubImageDataInput!
  create: ClubCreateWithoutClubImageInput!
}

input ClubUpsertWithoutMasterInput {
  update: ClubUpdateWithoutMasterDataInput!
  create: ClubCreateWithoutMasterInput!
}

input ClubUpsertWithoutQuestuonsInput {
  update: ClubUpdateWithoutQuestuonsDataInput!
  create: ClubCreateWithoutQuestuonsInput!
}

input ClubWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  master: UserWhereInput
  questuons_every: QuestionWhereInput
  questuons_some: QuestionWhereInput
  questuons_none: QuestionWhereInput
  applications_every: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  applications_none: ApplicationWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  logo: String
  logo_not: String
  logo_in: [String!]
  logo_not_in: [String!]
  logo_lt: String
  logo_lte: String
  logo_gt: String
  logo_gte: String
  logo_contains: String
  logo_not_contains: String
  logo_starts_with: String
  logo_not_starts_with: String
  logo_ends_with: String
  logo_not_ends_with: String
  clubImage: FileWhereInput
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  socialUrl: String
  socialUrl_not: String
  socialUrl_in: [String!]
  socialUrl_not_in: [String!]
  socialUrl_lt: String
  socialUrl_lte: String
  socialUrl_gt: String
  socialUrl_gte: String
  socialUrl_contains: String
  socialUrl_not_contains: String
  socialUrl_starts_with: String
  socialUrl_not_starts_with: String
  socialUrl_ends_with: String
  socialUrl_not_ends_with: String
  socialDisplay: Boolean
  socialDisplay_not: Boolean
  AND: [ClubWhereInput!]
  OR: [ClubWhereInput!]
  NOT: [ClubWhereInput!]
}

input ClubWhereUniqueInput {
  id: ID
}

type File {
  id: ID!
  url: String!
  club: Club!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  url: String!
  club: ClubCreateOneWithoutClubImageInput!
}

input FileCreateOneWithoutClubInput {
  create: FileCreateWithoutClubInput
  connect: FileWhereUniqueInput
}

input FileCreateWithoutClubInput {
  id: ID
  url: String!
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  id: ID!
  url: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateInput {
  url: String
  club: ClubUpdateOneRequiredWithoutClubImageInput
}

input FileUpdateManyMutationInput {
  url: String
}

input FileUpdateOneWithoutClubInput {
  create: FileCreateWithoutClubInput
  update: FileUpdateWithoutClubDataInput
  upsert: FileUpsertWithoutClubInput
  delete: Boolean
  disconnect: Boolean
  connect: FileWhereUniqueInput
}

input FileUpdateWithoutClubDataInput {
  url: String
}

input FileUpsertWithoutClubInput {
  update: FileUpdateWithoutClubDataInput!
  create: FileCreateWithoutClubInput!
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  club: ClubWhereInput
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
}

scalar Long

type Message {
  id: ID!
  text: String!
  from: User!
  to: User!
  room: Room!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  text: String!
  from: UserCreateOneInput!
  to: UserCreateOneInput!
  room: RoomCreateOneWithoutMessagesInput!
}

input MessageCreateManyWithoutRoomInput {
  create: [MessageCreateWithoutRoomInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutRoomInput {
  id: ID
  text: String!
  from: UserCreateOneInput!
  to: UserCreateOneInput!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
}

type MessagePreviousValues {
  id: ID!
  text: String!
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  text: String
  from: UserUpdateOneRequiredInput
  to: UserUpdateOneRequiredInput
  room: RoomUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateManyDataInput {
  text: String
}

input MessageUpdateManyMutationInput {
  text: String
}

input MessageUpdateManyWithoutRoomInput {
  create: [MessageCreateWithoutRoomInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutRoomInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutRoomInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateWithoutRoomDataInput {
  text: String
  from: UserUpdateOneRequiredInput
  to: UserUpdateOneRequiredInput
}

input MessageUpdateWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutRoomDataInput!
}

input MessageUpsertWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutRoomDataInput!
  create: MessageCreateWithoutRoomInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  from: UserWhereInput
  to: UserWhereInput
  room: RoomWhereInput
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createApplication(data: ApplicationCreateInput!): Application!
  updateApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  updateManyApplications(data: ApplicationUpdateManyMutationInput!, where: ApplicationWhereInput): BatchPayload!
  upsertApplication(where: ApplicationWhereUniqueInput!, create: ApplicationCreateInput!, update: ApplicationUpdateInput!): Application!
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteManyApplications(where: ApplicationWhereInput): BatchPayload!
  createClub(data: ClubCreateInput!): Club!
  updateClub(data: ClubUpdateInput!, where: ClubWhereUniqueInput!): Club
  updateManyClubs(data: ClubUpdateManyMutationInput!, where: ClubWhereInput): BatchPayload!
  upsertClub(where: ClubWhereUniqueInput!, create: ClubCreateInput!, update: ClubUpdateInput!): Club!
  deleteClub(where: ClubWhereUniqueInput!): Club
  deleteManyClubs(where: ClubWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createNotification(data: NotificationCreateInput!): Notification!
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  createQuestion(data: QuestionCreateInput!): Question!
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateManyQuestions(data: QuestionUpdateManyMutationInput!, where: QuestionWhereInput): BatchPayload!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  createRoom(data: RoomCreateInput!): Room!
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  upsertRoom(where: RoomWhereUniqueInput!, create: RoomCreateInput!, update: RoomUpdateInput!): Room!
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deleteManyRooms(where: RoomWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Notification {
  id: ID!
  userId: Int!
  content: String!
  checked: Boolean!
}

type NotificationConnection {
  pageInfo: PageInfo!
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  id: ID
  userId: Int!
  content: String!
  checked: Boolean!
}

input NotificationCreateManyInput {
  create: [NotificationCreateInput!]
  connect: [NotificationWhereUniqueInput!]
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  content_ASC
  content_DESC
  checked_ASC
  checked_DESC
}

type NotificationPreviousValues {
  id: ID!
  userId: Int!
  content: String!
  checked: Boolean!
}

input NotificationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: Int
  userId_not: Int
  userId_in: [Int!]
  userId_not_in: [Int!]
  userId_lt: Int
  userId_lte: Int
  userId_gt: Int
  userId_gte: Int
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  checked: Boolean
  checked_not: Boolean
  AND: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
  AND: [NotificationSubscriptionWhereInput!]
  OR: [NotificationSubscriptionWhereInput!]
  NOT: [NotificationSubscriptionWhereInput!]
}

input NotificationUpdateDataInput {
  userId: Int
  content: String
  checked: Boolean
}

input NotificationUpdateInput {
  userId: Int
  content: String
  checked: Boolean
}

input NotificationUpdateManyDataInput {
  userId: Int
  content: String
  checked: Boolean
}

input NotificationUpdateManyInput {
  create: [NotificationCreateInput!]
  update: [NotificationUpdateWithWhereUniqueNestedInput!]
  upsert: [NotificationUpsertWithWhereUniqueNestedInput!]
  delete: [NotificationWhereUniqueInput!]
  connect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
}

input NotificationUpdateManyMutationInput {
  userId: Int
  content: String
  checked: Boolean
}

input NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput!
  data: NotificationUpdateManyDataInput!
}

input NotificationUpdateWithWhereUniqueNestedInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateDataInput!
}

input NotificationUpsertWithWhereUniqueNestedInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateDataInput!
  create: NotificationCreateInput!
}

input NotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: Int
  userId_not: Int
  userId_in: [Int!]
  userId_not_in: [Int!]
  userId_lt: Int
  userId_lte: Int
  userId_gt: Int
  userId_gte: Int
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  checked: Boolean
  checked_not: Boolean
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
}

input NotificationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  application(where: ApplicationWhereUniqueInput!): Application
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application]!
  applicationsConnection(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApplicationConnection!
  club(where: ClubWhereUniqueInput!): Club
  clubs(where: ClubWhereInput, orderBy: ClubOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Club]!
  clubsConnection(where: ClubWhereInput, orderBy: ClubOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClubConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  question(where: QuestionWhereUniqueInput!): Question
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  room(where: RoomWhereUniqueInput!): Room
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room]!
  roomsConnection(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoomConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Question {
  id: ID!
  owner: Club!
  subject: String
  type: String
  options: [String!]!
}

type QuestionConnection {
  pageInfo: PageInfo!
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  id: ID
  owner: ClubCreateOneWithoutQuestuonsInput!
  subject: String
  type: String
  options: QuestionCreateoptionsInput
}

input QuestionCreateManyInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutOwnerInput {
  create: [QuestionCreateWithoutOwnerInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateoptionsInput {
  set: [String!]
}

input QuestionCreateWithoutOwnerInput {
  id: ID
  subject: String
  type: String
  options: QuestionCreateoptionsInput
}

type QuestionEdge {
  node: Question!
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  subject_ASC
  subject_DESC
  type_ASC
  type_DESC
}

type QuestionPreviousValues {
  id: ID!
  subject: String
  type: String
  options: [String!]!
}

input QuestionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  subject: String
  subject_not: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_lt: String
  subject_lte: String
  subject_gt: String
  subject_gte: String
  subject_contains: String
  subject_not_contains: String
  subject_starts_with: String
  subject_not_starts_with: String
  subject_ends_with: String
  subject_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  AND: [QuestionScalarWhereInput!]
  OR: [QuestionScalarWhereInput!]
  NOT: [QuestionScalarWhereInput!]
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
  AND: [QuestionSubscriptionWhereInput!]
  OR: [QuestionSubscriptionWhereInput!]
  NOT: [QuestionSubscriptionWhereInput!]
}

input QuestionUpdateDataInput {
  owner: ClubUpdateOneRequiredWithoutQuestuonsInput
  subject: String
  type: String
  options: QuestionUpdateoptionsInput
}

input QuestionUpdateInput {
  owner: ClubUpdateOneRequiredWithoutQuestuonsInput
  subject: String
  type: String
  options: QuestionUpdateoptionsInput
}

input QuestionUpdateManyDataInput {
  subject: String
  type: String
  options: QuestionUpdateoptionsInput
}

input QuestionUpdateManyInput {
  create: [QuestionCreateInput!]
  update: [QuestionUpdateWithWhereUniqueNestedInput!]
  upsert: [QuestionUpsertWithWhereUniqueNestedInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyMutationInput {
  subject: String
  type: String
  options: QuestionUpdateoptionsInput
}

input QuestionUpdateManyWithoutOwnerInput {
  create: [QuestionCreateWithoutOwnerInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput!
  data: QuestionUpdateManyDataInput!
}

input QuestionUpdateoptionsInput {
  set: [String!]
}

input QuestionUpdateWithoutOwnerDataInput {
  subject: String
  type: String
  options: QuestionUpdateoptionsInput
}

input QuestionUpdateWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutOwnerInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutOwnerDataInput!
}

input QuestionUpsertWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateDataInput!
  create: QuestionCreateInput!
}

input QuestionUpsertWithWhereUniqueWithoutOwnerInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutOwnerDataInput!
  create: QuestionCreateWithoutOwnerInput!
}

input QuestionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  owner: ClubWhereInput
  subject: String
  subject_not: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_lt: String
  subject_lte: String
  subject_gt: String
  subject_gte: String
  subject_contains: String
  subject_not_contains: String
  subject_starts_with: String
  subject_not_starts_with: String
  subject_ends_with: String
  subject_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
}

input QuestionWhereUniqueInput {
  id: ID
}

type Room {
  id: ID!
  participants(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
}

type RoomConnection {
  pageInfo: PageInfo!
  edges: [RoomEdge]!
  aggregate: AggregateRoom!
}

input RoomCreateInput {
  id: ID
  participants: UserCreateManyWithoutRoomsInput
  messages: MessageCreateManyWithoutRoomInput
}

input RoomCreateManyWithoutParticipantsInput {
  create: [RoomCreateWithoutParticipantsInput!]
  connect: [RoomWhereUniqueInput!]
}

input RoomCreateOneWithoutMessagesInput {
  create: RoomCreateWithoutMessagesInput
  connect: RoomWhereUniqueInput
}

input RoomCreateWithoutMessagesInput {
  id: ID
  participants: UserCreateManyWithoutRoomsInput
}

input RoomCreateWithoutParticipantsInput {
  id: ID
  messages: MessageCreateManyWithoutRoomInput
}

type RoomEdge {
  node: Room!
  cursor: String!
}

enum RoomOrderByInput {
  id_ASC
  id_DESC
}

type RoomPreviousValues {
  id: ID!
}

input RoomScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [RoomScalarWhereInput!]
  OR: [RoomScalarWhereInput!]
  NOT: [RoomScalarWhereInput!]
}

type RoomSubscriptionPayload {
  mutation: MutationType!
  node: Room
  updatedFields: [String!]
  previousValues: RoomPreviousValues
}

input RoomSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoomWhereInput
  AND: [RoomSubscriptionWhereInput!]
  OR: [RoomSubscriptionWhereInput!]
  NOT: [RoomSubscriptionWhereInput!]
}

input RoomUpdateInput {
  participants: UserUpdateManyWithoutRoomsInput
  messages: MessageUpdateManyWithoutRoomInput
}

input RoomUpdateManyWithoutParticipantsInput {
  create: [RoomCreateWithoutParticipantsInput!]
  delete: [RoomWhereUniqueInput!]
  connect: [RoomWhereUniqueInput!]
  set: [RoomWhereUniqueInput!]
  disconnect: [RoomWhereUniqueInput!]
  update: [RoomUpdateWithWhereUniqueWithoutParticipantsInput!]
  upsert: [RoomUpsertWithWhereUniqueWithoutParticipantsInput!]
  deleteMany: [RoomScalarWhereInput!]
}

input RoomUpdateOneRequiredWithoutMessagesInput {
  create: RoomCreateWithoutMessagesInput
  update: RoomUpdateWithoutMessagesDataInput
  upsert: RoomUpsertWithoutMessagesInput
  connect: RoomWhereUniqueInput
}

input RoomUpdateWithoutMessagesDataInput {
  participants: UserUpdateManyWithoutRoomsInput
}

input RoomUpdateWithoutParticipantsDataInput {
  messages: MessageUpdateManyWithoutRoomInput
}

input RoomUpdateWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput!
  data: RoomUpdateWithoutParticipantsDataInput!
}

input RoomUpsertWithoutMessagesInput {
  update: RoomUpdateWithoutMessagesDataInput!
  create: RoomCreateWithoutMessagesInput!
}

input RoomUpsertWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput!
  update: RoomUpdateWithoutParticipantsDataInput!
  create: RoomCreateWithoutParticipantsInput!
}

input RoomWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  participants_every: UserWhereInput
  participants_some: UserWhereInput
  participants_none: UserWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  AND: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  NOT: [RoomWhereInput!]
}

input RoomWhereUniqueInput {
  id: ID
}

type Subscription {
  application(where: ApplicationSubscriptionWhereInput): ApplicationSubscriptionPayload
  club(where: ClubSubscriptionWhereInput): ClubSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  room(where: RoomSubscriptionWhereInput): RoomSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  encryptedPassword: String!
  Name: String
  studentNumber: Int
  phoneNumber: String
  sex: String
  isMaster: Club
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room!]
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  loginSecret: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  encryptedPassword: String!
  Name: String
  studentNumber: Int
  phoneNumber: String
  sex: String
  isMaster: ClubCreateOneWithoutMasterInput
  applications: ApplicationCreateManyInput
  rooms: RoomCreateManyWithoutParticipantsInput
  notifications: NotificationCreateManyInput
  loginSecret: String
}

input UserCreateManyWithoutRoomsInput {
  create: [UserCreateWithoutRoomsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutIsMasterInput {
  create: UserCreateWithoutIsMasterInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutIsMasterInput {
  id: ID
  email: String!
  encryptedPassword: String!
  Name: String
  studentNumber: Int
  phoneNumber: String
  sex: String
  applications: ApplicationCreateManyInput
  rooms: RoomCreateManyWithoutParticipantsInput
  notifications: NotificationCreateManyInput
  loginSecret: String
}

input UserCreateWithoutRoomsInput {
  id: ID
  email: String!
  encryptedPassword: String!
  Name: String
  studentNumber: Int
  phoneNumber: String
  sex: String
  isMaster: ClubCreateOneWithoutMasterInput
  applications: ApplicationCreateManyInput
  notifications: NotificationCreateManyInput
  loginSecret: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  encryptedPassword_ASC
  encryptedPassword_DESC
  Name_ASC
  Name_DESC
  studentNumber_ASC
  studentNumber_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  sex_ASC
  sex_DESC
  loginSecret_ASC
  loginSecret_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  encryptedPassword: String!
  Name: String
  studentNumber: Int
  phoneNumber: String
  sex: String
  loginSecret: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  encryptedPassword: String
  encryptedPassword_not: String
  encryptedPassword_in: [String!]
  encryptedPassword_not_in: [String!]
  encryptedPassword_lt: String
  encryptedPassword_lte: String
  encryptedPassword_gt: String
  encryptedPassword_gte: String
  encryptedPassword_contains: String
  encryptedPassword_not_contains: String
  encryptedPassword_starts_with: String
  encryptedPassword_not_starts_with: String
  encryptedPassword_ends_with: String
  encryptedPassword_not_ends_with: String
  Name: String
  Name_not: String
  Name_in: [String!]
  Name_not_in: [String!]
  Name_lt: String
  Name_lte: String
  Name_gt: String
  Name_gte: String
  Name_contains: String
  Name_not_contains: String
  Name_starts_with: String
  Name_not_starts_with: String
  Name_ends_with: String
  Name_not_ends_with: String
  studentNumber: Int
  studentNumber_not: Int
  studentNumber_in: [Int!]
  studentNumber_not_in: [Int!]
  studentNumber_lt: Int
  studentNumber_lte: Int
  studentNumber_gt: Int
  studentNumber_gte: Int
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  sex: String
  sex_not: String
  sex_in: [String!]
  sex_not_in: [String!]
  sex_lt: String
  sex_lte: String
  sex_gt: String
  sex_gte: String
  sex_contains: String
  sex_not_contains: String
  sex_starts_with: String
  sex_not_starts_with: String
  sex_ends_with: String
  sex_not_ends_with: String
  loginSecret: String
  loginSecret_not: String
  loginSecret_in: [String!]
  loginSecret_not_in: [String!]
  loginSecret_lt: String
  loginSecret_lte: String
  loginSecret_gt: String
  loginSecret_gte: String
  loginSecret_contains: String
  loginSecret_not_contains: String
  loginSecret_starts_with: String
  loginSecret_not_starts_with: String
  loginSecret_ends_with: String
  loginSecret_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  encryptedPassword: String
  Name: String
  studentNumber: Int
  phoneNumber: String
  sex: String
  isMaster: ClubUpdateOneWithoutMasterInput
  applications: ApplicationUpdateManyInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  notifications: NotificationUpdateManyInput
  loginSecret: String
}

input UserUpdateInput {
  email: String
  encryptedPassword: String
  Name: String
  studentNumber: Int
  phoneNumber: String
  sex: String
  isMaster: ClubUpdateOneWithoutMasterInput
  applications: ApplicationUpdateManyInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  notifications: NotificationUpdateManyInput
  loginSecret: String
}

input UserUpdateManyDataInput {
  email: String
  encryptedPassword: String
  Name: String
  studentNumber: Int
  phoneNumber: String
  sex: String
  loginSecret: String
}

input UserUpdateManyMutationInput {
  email: String
  encryptedPassword: String
  Name: String
  studentNumber: Int
  phoneNumber: String
  sex: String
  loginSecret: String
}

input UserUpdateManyWithoutRoomsInput {
  create: [UserCreateWithoutRoomsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRoomsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRoomsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutIsMasterInput {
  create: UserCreateWithoutIsMasterInput
  update: UserUpdateWithoutIsMasterDataInput
  upsert: UserUpsertWithoutIsMasterInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutIsMasterDataInput {
  email: String
  encryptedPassword: String
  Name: String
  studentNumber: Int
  phoneNumber: String
  sex: String
  applications: ApplicationUpdateManyInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  notifications: NotificationUpdateManyInput
  loginSecret: String
}

input UserUpdateWithoutRoomsDataInput {
  email: String
  encryptedPassword: String
  Name: String
  studentNumber: Int
  phoneNumber: String
  sex: String
  isMaster: ClubUpdateOneWithoutMasterInput
  applications: ApplicationUpdateManyInput
  notifications: NotificationUpdateManyInput
  loginSecret: String
}

input UserUpdateWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRoomsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutIsMasterInput {
  update: UserUpdateWithoutIsMasterDataInput!
  create: UserCreateWithoutIsMasterInput!
}

input UserUpsertWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRoomsDataInput!
  create: UserCreateWithoutRoomsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  encryptedPassword: String
  encryptedPassword_not: String
  encryptedPassword_in: [String!]
  encryptedPassword_not_in: [String!]
  encryptedPassword_lt: String
  encryptedPassword_lte: String
  encryptedPassword_gt: String
  encryptedPassword_gte: String
  encryptedPassword_contains: String
  encryptedPassword_not_contains: String
  encryptedPassword_starts_with: String
  encryptedPassword_not_starts_with: String
  encryptedPassword_ends_with: String
  encryptedPassword_not_ends_with: String
  Name: String
  Name_not: String
  Name_in: [String!]
  Name_not_in: [String!]
  Name_lt: String
  Name_lte: String
  Name_gt: String
  Name_gte: String
  Name_contains: String
  Name_not_contains: String
  Name_starts_with: String
  Name_not_starts_with: String
  Name_ends_with: String
  Name_not_ends_with: String
  studentNumber: Int
  studentNumber_not: Int
  studentNumber_in: [Int!]
  studentNumber_not_in: [Int!]
  studentNumber_lt: Int
  studentNumber_lte: Int
  studentNumber_gt: Int
  studentNumber_gte: Int
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  sex: String
  sex_not: String
  sex_in: [String!]
  sex_not_in: [String!]
  sex_lt: String
  sex_lte: String
  sex_gt: String
  sex_gte: String
  sex_contains: String
  sex_not_contains: String
  sex_starts_with: String
  sex_not_starts_with: String
  sex_ends_with: String
  sex_not_ends_with: String
  isMaster: ClubWhereInput
  applications_every: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  applications_none: ApplicationWhereInput
  rooms_every: RoomWhereInput
  rooms_some: RoomWhereInput
  rooms_none: RoomWhereInput
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  loginSecret: String
  loginSecret_not: String
  loginSecret_in: [String!]
  loginSecret_not_in: [String!]
  loginSecret_lt: String
  loginSecret_lte: String
  loginSecret_gt: String
  loginSecret_gte: String
  loginSecret_contains: String
  loginSecret_not_contains: String
  loginSecret_starts_with: String
  loginSecret_not_starts_with: String
  loginSecret_ends_with: String
  loginSecret_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    