// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  application: (where?: ApplicationWhereInput) => Promise<boolean>;
  club: (where?: ClubWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  notification: (where?: NotificationWhereInput) => Promise<boolean>;
  question: (where?: QuestionWhereInput) => Promise<boolean>;
  room: (where?: RoomWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  application: (
    where: ApplicationWhereUniqueInput
  ) => ApplicationNullablePromise;
  applications: (args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Application>;
  applicationsConnection: (args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ApplicationConnectionPromise;
  club: (where: ClubWhereUniqueInput) => ClubNullablePromise;
  clubs: (args?: {
    where?: ClubWhereInput;
    orderBy?: ClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Club>;
  clubsConnection: (args?: {
    where?: ClubWhereInput;
    orderBy?: ClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClubConnectionPromise;
  file: (where: FileWhereUniqueInput) => FileNullablePromise;
  files: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<File>;
  filesConnection: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FileConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  notification: (
    where: NotificationWhereUniqueInput
  ) => NotificationNullablePromise;
  notifications: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notification>;
  notificationsConnection: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NotificationConnectionPromise;
  question: (where: QuestionWhereUniqueInput) => QuestionNullablePromise;
  questions: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Question>;
  questionsConnection: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuestionConnectionPromise;
  room: (where: RoomWhereUniqueInput) => RoomNullablePromise;
  rooms: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Room>;
  roomsConnection: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoomConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createApplication: (data: ApplicationCreateInput) => ApplicationPromise;
  updateApplication: (args: {
    data: ApplicationUpdateInput;
    where: ApplicationWhereUniqueInput;
  }) => ApplicationPromise;
  updateManyApplications: (args: {
    data: ApplicationUpdateManyMutationInput;
    where?: ApplicationWhereInput;
  }) => BatchPayloadPromise;
  upsertApplication: (args: {
    where: ApplicationWhereUniqueInput;
    create: ApplicationCreateInput;
    update: ApplicationUpdateInput;
  }) => ApplicationPromise;
  deleteApplication: (where: ApplicationWhereUniqueInput) => ApplicationPromise;
  deleteManyApplications: (
    where?: ApplicationWhereInput
  ) => BatchPayloadPromise;
  createClub: (data: ClubCreateInput) => ClubPromise;
  updateClub: (args: {
    data: ClubUpdateInput;
    where: ClubWhereUniqueInput;
  }) => ClubPromise;
  updateManyClubs: (args: {
    data: ClubUpdateManyMutationInput;
    where?: ClubWhereInput;
  }) => BatchPayloadPromise;
  upsertClub: (args: {
    where: ClubWhereUniqueInput;
    create: ClubCreateInput;
    update: ClubUpdateInput;
  }) => ClubPromise;
  deleteClub: (where: ClubWhereUniqueInput) => ClubPromise;
  deleteManyClubs: (where?: ClubWhereInput) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (args: {
    data: FileUpdateInput;
    where: FileWhereUniqueInput;
  }) => FilePromise;
  updateManyFiles: (args: {
    data: FileUpdateManyMutationInput;
    where?: FileWhereInput;
  }) => BatchPayloadPromise;
  upsertFile: (args: {
    where: FileWhereUniqueInput;
    create: FileCreateInput;
    update: FileUpdateInput;
  }) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createNotification: (data: NotificationCreateInput) => NotificationPromise;
  updateNotification: (args: {
    data: NotificationUpdateInput;
    where: NotificationWhereUniqueInput;
  }) => NotificationPromise;
  updateManyNotifications: (args: {
    data: NotificationUpdateManyMutationInput;
    where?: NotificationWhereInput;
  }) => BatchPayloadPromise;
  upsertNotification: (args: {
    where: NotificationWhereUniqueInput;
    create: NotificationCreateInput;
    update: NotificationUpdateInput;
  }) => NotificationPromise;
  deleteNotification: (
    where: NotificationWhereUniqueInput
  ) => NotificationPromise;
  deleteManyNotifications: (
    where?: NotificationWhereInput
  ) => BatchPayloadPromise;
  createQuestion: (data: QuestionCreateInput) => QuestionPromise;
  updateQuestion: (args: {
    data: QuestionUpdateInput;
    where: QuestionWhereUniqueInput;
  }) => QuestionPromise;
  updateManyQuestions: (args: {
    data: QuestionUpdateManyMutationInput;
    where?: QuestionWhereInput;
  }) => BatchPayloadPromise;
  upsertQuestion: (args: {
    where: QuestionWhereUniqueInput;
    create: QuestionCreateInput;
    update: QuestionUpdateInput;
  }) => QuestionPromise;
  deleteQuestion: (where: QuestionWhereUniqueInput) => QuestionPromise;
  deleteManyQuestions: (where?: QuestionWhereInput) => BatchPayloadPromise;
  createRoom: (data: RoomCreateInput) => RoomPromise;
  updateRoom: (args: {
    data: RoomUpdateInput;
    where: RoomWhereUniqueInput;
  }) => RoomPromise;
  upsertRoom: (args: {
    where: RoomWhereUniqueInput;
    create: RoomCreateInput;
    update: RoomUpdateInput;
  }) => RoomPromise;
  deleteRoom: (where: RoomWhereUniqueInput) => RoomPromise;
  deleteManyRooms: (where?: RoomWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  application: (
    where?: ApplicationSubscriptionWhereInput
  ) => ApplicationSubscriptionPayloadSubscription;
  club: (
    where?: ClubSubscriptionWhereInput
  ) => ClubSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  notification: (
    where?: NotificationSubscriptionWhereInput
  ) => NotificationSubscriptionPayloadSubscription;
  question: (
    where?: QuestionSubscriptionWhereInput
  ) => QuestionSubscriptionPayloadSubscription;
  room: (
    where?: RoomSubscriptionWhereInput
  ) => RoomSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type QuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "subject_ASC"
  | "subject_DESC"
  | "type_ASC"
  | "type_DESC";

export type ApplicationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "created_ASC"
  | "created_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "encryptedPassword_ASC"
  | "encryptedPassword_DESC"
  | "Name_ASC"
  | "Name_DESC"
  | "studentNumber_ASC"
  | "studentNumber_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "sex_ASC"
  | "sex_DESC";

export type NotificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "checked_ASC"
  | "checked_DESC"
  | "created_ASC"
  | "created_DESC";

export type RoomOrderByInput = "id_ASC" | "id_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC";

export type ClubOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "description_ASC"
  | "description_DESC"
  | "logo_ASC"
  | "logo_DESC"
  | "type_ASC"
  | "type_DESC"
  | "socialUrl_ASC"
  | "socialUrl_DESC"
  | "socialDisplay_ASC"
  | "socialDisplay_DESC";

export type FileOrderByInput = "id_ASC" | "id_DESC" | "url_ASC" | "url_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ApplicationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface QuestionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<ClubWhereInput>;
  subject?: Maybe<String>;
  subject_not?: Maybe<String>;
  subject_in?: Maybe<String[] | String>;
  subject_not_in?: Maybe<String[] | String>;
  subject_lt?: Maybe<String>;
  subject_lte?: Maybe<String>;
  subject_gt?: Maybe<String>;
  subject_gte?: Maybe<String>;
  subject_contains?: Maybe<String>;
  subject_not_contains?: Maybe<String>;
  subject_starts_with?: Maybe<String>;
  subject_not_starts_with?: Maybe<String>;
  subject_ends_with?: Maybe<String>;
  subject_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  OR?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  NOT?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
}

export interface ClubWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  logo?: Maybe<String>;
  logo_not?: Maybe<String>;
  logo_in?: Maybe<String[] | String>;
  logo_not_in?: Maybe<String[] | String>;
  logo_lt?: Maybe<String>;
  logo_lte?: Maybe<String>;
  logo_gt?: Maybe<String>;
  logo_gte?: Maybe<String>;
  logo_contains?: Maybe<String>;
  logo_not_contains?: Maybe<String>;
  logo_starts_with?: Maybe<String>;
  logo_not_starts_with?: Maybe<String>;
  logo_ends_with?: Maybe<String>;
  logo_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  socialUrl?: Maybe<String>;
  socialUrl_not?: Maybe<String>;
  socialUrl_in?: Maybe<String[] | String>;
  socialUrl_not_in?: Maybe<String[] | String>;
  socialUrl_lt?: Maybe<String>;
  socialUrl_lte?: Maybe<String>;
  socialUrl_gt?: Maybe<String>;
  socialUrl_gte?: Maybe<String>;
  socialUrl_contains?: Maybe<String>;
  socialUrl_not_contains?: Maybe<String>;
  socialUrl_starts_with?: Maybe<String>;
  socialUrl_not_starts_with?: Maybe<String>;
  socialUrl_ends_with?: Maybe<String>;
  socialUrl_not_ends_with?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
  socialDisplay_not?: Maybe<Boolean>;
  clubImage?: Maybe<FileWhereInput>;
  master?: Maybe<UserWhereInput>;
  questions_every?: Maybe<QuestionWhereInput>;
  questions_some?: Maybe<QuestionWhereInput>;
  questions_none?: Maybe<QuestionWhereInput>;
  applications_every?: Maybe<ApplicationWhereInput>;
  applications_some?: Maybe<ApplicationWhereInput>;
  applications_none?: Maybe<ApplicationWhereInput>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  AND?: Maybe<ClubWhereInput[] | ClubWhereInput>;
  OR?: Maybe<ClubWhereInput[] | ClubWhereInput>;
  NOT?: Maybe<ClubWhereInput[] | ClubWhereInput>;
}

export interface FileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  club?: Maybe<ClubWhereInput>;
  AND?: Maybe<FileWhereInput[] | FileWhereInput>;
  OR?: Maybe<FileWhereInput[] | FileWhereInput>;
  NOT?: Maybe<FileWhereInput[] | FileWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  encryptedPassword?: Maybe<String>;
  encryptedPassword_not?: Maybe<String>;
  encryptedPassword_in?: Maybe<String[] | String>;
  encryptedPassword_not_in?: Maybe<String[] | String>;
  encryptedPassword_lt?: Maybe<String>;
  encryptedPassword_lte?: Maybe<String>;
  encryptedPassword_gt?: Maybe<String>;
  encryptedPassword_gte?: Maybe<String>;
  encryptedPassword_contains?: Maybe<String>;
  encryptedPassword_not_contains?: Maybe<String>;
  encryptedPassword_starts_with?: Maybe<String>;
  encryptedPassword_not_starts_with?: Maybe<String>;
  encryptedPassword_ends_with?: Maybe<String>;
  encryptedPassword_not_ends_with?: Maybe<String>;
  Name?: Maybe<String>;
  Name_not?: Maybe<String>;
  Name_in?: Maybe<String[] | String>;
  Name_not_in?: Maybe<String[] | String>;
  Name_lt?: Maybe<String>;
  Name_lte?: Maybe<String>;
  Name_gt?: Maybe<String>;
  Name_gte?: Maybe<String>;
  Name_contains?: Maybe<String>;
  Name_not_contains?: Maybe<String>;
  Name_starts_with?: Maybe<String>;
  Name_not_starts_with?: Maybe<String>;
  Name_ends_with?: Maybe<String>;
  Name_not_ends_with?: Maybe<String>;
  studentNumber?: Maybe<String>;
  studentNumber_not?: Maybe<String>;
  studentNumber_in?: Maybe<String[] | String>;
  studentNumber_not_in?: Maybe<String[] | String>;
  studentNumber_lt?: Maybe<String>;
  studentNumber_lte?: Maybe<String>;
  studentNumber_gt?: Maybe<String>;
  studentNumber_gte?: Maybe<String>;
  studentNumber_contains?: Maybe<String>;
  studentNumber_not_contains?: Maybe<String>;
  studentNumber_starts_with?: Maybe<String>;
  studentNumber_not_starts_with?: Maybe<String>;
  studentNumber_ends_with?: Maybe<String>;
  studentNumber_not_ends_with?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  sex?: Maybe<String>;
  sex_not?: Maybe<String>;
  sex_in?: Maybe<String[] | String>;
  sex_not_in?: Maybe<String[] | String>;
  sex_lt?: Maybe<String>;
  sex_lte?: Maybe<String>;
  sex_gt?: Maybe<String>;
  sex_gte?: Maybe<String>;
  sex_contains?: Maybe<String>;
  sex_not_contains?: Maybe<String>;
  sex_starts_with?: Maybe<String>;
  sex_not_starts_with?: Maybe<String>;
  sex_ends_with?: Maybe<String>;
  sex_not_ends_with?: Maybe<String>;
  isMaster?: Maybe<ClubWhereInput>;
  notifications_every?: Maybe<NotificationWhereInput>;
  notifications_some?: Maybe<NotificationWhereInput>;
  notifications_none?: Maybe<NotificationWhereInput>;
  applications_every?: Maybe<ApplicationWhereInput>;
  applications_some?: Maybe<ApplicationWhereInput>;
  applications_none?: Maybe<ApplicationWhereInput>;
  rooms_every?: Maybe<RoomWhereInput>;
  rooms_some?: Maybe<RoomWhereInput>;
  rooms_none?: Maybe<RoomWhereInput>;
  clubs_every?: Maybe<ClubWhereInput>;
  clubs_some?: Maybe<ClubWhereInput>;
  clubs_none?: Maybe<ClubWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface NotificationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  checked?: Maybe<Boolean>;
  checked_not?: Maybe<Boolean>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  OR?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  NOT?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
}

export interface ApplicationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  club?: Maybe<ClubWhereInput>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ApplicationWhereInput[] | ApplicationWhereInput>;
  OR?: Maybe<ApplicationWhereInput[] | ApplicationWhereInput>;
  NOT?: Maybe<ApplicationWhereInput[] | ApplicationWhereInput>;
}

export interface RoomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  participants_every?: Maybe<UserWhereInput>;
  participants_some?: Maybe<UserWhereInput>;
  participants_none?: Maybe<UserWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  AND?: Maybe<RoomWhereInput[] | RoomWhereInput>;
  OR?: Maybe<RoomWhereInput[] | RoomWhereInput>;
  NOT?: Maybe<RoomWhereInput[] | RoomWhereInput>;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  from?: Maybe<UserWhereInput>;
  to?: Maybe<UserWhereInput>;
  room?: Maybe<RoomWhereInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export type ClubWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type NotificationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type QuestionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RoomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ApplicationCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutApplicationsInput;
  club: ClubCreateOneWithoutApplicationsInput;
  answer?: Maybe<ApplicationCreateanswerInput>;
  status?: Maybe<String>;
}

export interface UserCreateOneWithoutApplicationsInput {
  create?: Maybe<UserCreateWithoutApplicationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutApplicationsInput {
  id?: Maybe<ID_Input>;
  email: String;
  encryptedPassword: String;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
  isMaster?: Maybe<ClubCreateOneWithoutMasterInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  clubs?: Maybe<ClubCreateManyWithoutMembersInput>;
}

export interface ClubCreateOneWithoutMasterInput {
  create?: Maybe<ClubCreateWithoutMasterInput>;
  connect?: Maybe<ClubWhereUniqueInput>;
}

export interface ClubCreateWithoutMasterInput {
  id?: Maybe<ID_Input>;
  name: String;
  bio: String;
  description: String;
  logo?: Maybe<String>;
  type: String;
  socialUrl?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
  clubImage?: Maybe<FileCreateOneWithoutClubInput>;
  questions?: Maybe<QuestionCreateManyWithoutOwnerInput>;
  applications?: Maybe<ApplicationCreateManyWithoutClubInput>;
  members?: Maybe<UserCreateManyWithoutClubsInput>;
}

export interface FileCreateOneWithoutClubInput {
  create?: Maybe<FileCreateWithoutClubInput>;
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface FileCreateWithoutClubInput {
  id?: Maybe<ID_Input>;
  url: String;
}

export interface QuestionCreateManyWithoutOwnerInput {
  create?: Maybe<
    QuestionCreateWithoutOwnerInput[] | QuestionCreateWithoutOwnerInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  subject?: Maybe<String>;
  type?: Maybe<String>;
  options?: Maybe<QuestionCreateoptionsInput>;
}

export interface QuestionCreateoptionsInput {
  set?: Maybe<String[] | String>;
}

export interface ApplicationCreateManyWithoutClubInput {
  create?: Maybe<
    ApplicationCreateWithoutClubInput[] | ApplicationCreateWithoutClubInput
  >;
  connect?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
}

export interface ApplicationCreateWithoutClubInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutApplicationsInput;
  answer?: Maybe<ApplicationCreateanswerInput>;
  status?: Maybe<String>;
}

export interface ApplicationCreateanswerInput {
  set?: Maybe<String[] | String>;
}

export interface UserCreateManyWithoutClubsInput {
  create?: Maybe<UserCreateWithoutClubsInput[] | UserCreateWithoutClubsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutClubsInput {
  id?: Maybe<ID_Input>;
  email: String;
  encryptedPassword: String;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
  isMaster?: Maybe<ClubCreateOneWithoutMasterInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  applications?: Maybe<ApplicationCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
}

export interface NotificationCreateManyWithoutUserInput {
  create?: Maybe<
    NotificationCreateWithoutUserInput[] | NotificationCreateWithoutUserInput
  >;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
}

export interface NotificationCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  content: String;
  checked?: Maybe<Boolean>;
}

export interface ApplicationCreateManyWithoutUserInput {
  create?: Maybe<
    ApplicationCreateWithoutUserInput[] | ApplicationCreateWithoutUserInput
  >;
  connect?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
}

export interface ApplicationCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  club: ClubCreateOneWithoutApplicationsInput;
  answer?: Maybe<ApplicationCreateanswerInput>;
  status?: Maybe<String>;
}

export interface ClubCreateOneWithoutApplicationsInput {
  create?: Maybe<ClubCreateWithoutApplicationsInput>;
  connect?: Maybe<ClubWhereUniqueInput>;
}

export interface ClubCreateWithoutApplicationsInput {
  id?: Maybe<ID_Input>;
  name: String;
  bio: String;
  description: String;
  logo?: Maybe<String>;
  type: String;
  socialUrl?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
  clubImage?: Maybe<FileCreateOneWithoutClubInput>;
  master: UserCreateOneWithoutIsMasterInput;
  questions?: Maybe<QuestionCreateManyWithoutOwnerInput>;
  members?: Maybe<UserCreateManyWithoutClubsInput>;
}

export interface UserCreateOneWithoutIsMasterInput {
  create?: Maybe<UserCreateWithoutIsMasterInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutIsMasterInput {
  id?: Maybe<ID_Input>;
  email: String;
  encryptedPassword: String;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  applications?: Maybe<ApplicationCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  clubs?: Maybe<ClubCreateManyWithoutMembersInput>;
}

export interface RoomCreateManyWithoutParticipantsInput {
  create?: Maybe<
    RoomCreateWithoutParticipantsInput[] | RoomCreateWithoutParticipantsInput
  >;
  connect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
}

export interface RoomCreateWithoutParticipantsInput {
  id?: Maybe<ID_Input>;
  messages?: Maybe<MessageCreateManyWithoutRoomInput>;
}

export interface MessageCreateManyWithoutRoomInput {
  create?: Maybe<
    MessageCreateWithoutRoomInput[] | MessageCreateWithoutRoomInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateWithoutRoomInput {
  id?: Maybe<ID_Input>;
  text: String;
  from: UserCreateOneInput;
  to: UserCreateOneInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  encryptedPassword: String;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
  isMaster?: Maybe<ClubCreateOneWithoutMasterInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  applications?: Maybe<ApplicationCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  clubs?: Maybe<ClubCreateManyWithoutMembersInput>;
}

export interface ClubCreateManyWithoutMembersInput {
  create?: Maybe<
    ClubCreateWithoutMembersInput[] | ClubCreateWithoutMembersInput
  >;
  connect?: Maybe<ClubWhereUniqueInput[] | ClubWhereUniqueInput>;
}

export interface ClubCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  name: String;
  bio: String;
  description: String;
  logo?: Maybe<String>;
  type: String;
  socialUrl?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
  clubImage?: Maybe<FileCreateOneWithoutClubInput>;
  master: UserCreateOneWithoutIsMasterInput;
  questions?: Maybe<QuestionCreateManyWithoutOwnerInput>;
  applications?: Maybe<ApplicationCreateManyWithoutClubInput>;
}

export interface ApplicationUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutApplicationsInput>;
  club?: Maybe<ClubUpdateOneRequiredWithoutApplicationsInput>;
  answer?: Maybe<ApplicationUpdateanswerInput>;
  status?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutApplicationsInput {
  create?: Maybe<UserCreateWithoutApplicationsInput>;
  update?: Maybe<UserUpdateWithoutApplicationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutApplicationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutApplicationsDataInput {
  email?: Maybe<String>;
  encryptedPassword?: Maybe<String>;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
  isMaster?: Maybe<ClubUpdateOneWithoutMasterInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  clubs?: Maybe<ClubUpdateManyWithoutMembersInput>;
}

export interface ClubUpdateOneWithoutMasterInput {
  create?: Maybe<ClubCreateWithoutMasterInput>;
  update?: Maybe<ClubUpdateWithoutMasterDataInput>;
  upsert?: Maybe<ClubUpsertWithoutMasterInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ClubWhereUniqueInput>;
}

export interface ClubUpdateWithoutMasterDataInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
  description?: Maybe<String>;
  logo?: Maybe<String>;
  type?: Maybe<String>;
  socialUrl?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
  clubImage?: Maybe<FileUpdateOneWithoutClubInput>;
  questions?: Maybe<QuestionUpdateManyWithoutOwnerInput>;
  applications?: Maybe<ApplicationUpdateManyWithoutClubInput>;
  members?: Maybe<UserUpdateManyWithoutClubsInput>;
}

export interface FileUpdateOneWithoutClubInput {
  create?: Maybe<FileCreateWithoutClubInput>;
  update?: Maybe<FileUpdateWithoutClubDataInput>;
  upsert?: Maybe<FileUpsertWithoutClubInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface FileUpdateWithoutClubDataInput {
  url?: Maybe<String>;
}

export interface FileUpsertWithoutClubInput {
  update: FileUpdateWithoutClubDataInput;
  create: FileCreateWithoutClubInput;
}

export interface QuestionUpdateManyWithoutOwnerInput {
  create?: Maybe<
    QuestionCreateWithoutOwnerInput[] | QuestionCreateWithoutOwnerInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutOwnerInput[]
    | QuestionUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutOwnerInput[]
    | QuestionUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutOwnerInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutOwnerDataInput;
}

export interface QuestionUpdateWithoutOwnerDataInput {
  subject?: Maybe<String>;
  type?: Maybe<String>;
  options?: Maybe<QuestionUpdateoptionsInput>;
}

export interface QuestionUpdateoptionsInput {
  set?: Maybe<String[] | String>;
}

export interface QuestionUpsertWithWhereUniqueWithoutOwnerInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutOwnerDataInput;
  create: QuestionCreateWithoutOwnerInput;
}

export interface QuestionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  subject?: Maybe<String>;
  subject_not?: Maybe<String>;
  subject_in?: Maybe<String[] | String>;
  subject_not_in?: Maybe<String[] | String>;
  subject_lt?: Maybe<String>;
  subject_lte?: Maybe<String>;
  subject_gt?: Maybe<String>;
  subject_gte?: Maybe<String>;
  subject_contains?: Maybe<String>;
  subject_not_contains?: Maybe<String>;
  subject_starts_with?: Maybe<String>;
  subject_not_starts_with?: Maybe<String>;
  subject_ends_with?: Maybe<String>;
  subject_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  OR?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  NOT?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
}

export interface QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput;
  data: QuestionUpdateManyDataInput;
}

export interface QuestionUpdateManyDataInput {
  subject?: Maybe<String>;
  type?: Maybe<String>;
  options?: Maybe<QuestionUpdateoptionsInput>;
}

export interface ApplicationUpdateManyWithoutClubInput {
  create?: Maybe<
    ApplicationCreateWithoutClubInput[] | ApplicationCreateWithoutClubInput
  >;
  delete?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
  connect?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
  set?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
  disconnect?: Maybe<
    ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput
  >;
  update?: Maybe<
    | ApplicationUpdateWithWhereUniqueWithoutClubInput[]
    | ApplicationUpdateWithWhereUniqueWithoutClubInput
  >;
  upsert?: Maybe<
    | ApplicationUpsertWithWhereUniqueWithoutClubInput[]
    | ApplicationUpsertWithWhereUniqueWithoutClubInput
  >;
  deleteMany?: Maybe<
    ApplicationScalarWhereInput[] | ApplicationScalarWhereInput
  >;
  updateMany?: Maybe<
    | ApplicationUpdateManyWithWhereNestedInput[]
    | ApplicationUpdateManyWithWhereNestedInput
  >;
}

export interface ApplicationUpdateWithWhereUniqueWithoutClubInput {
  where: ApplicationWhereUniqueInput;
  data: ApplicationUpdateWithoutClubDataInput;
}

export interface ApplicationUpdateWithoutClubDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutApplicationsInput>;
  answer?: Maybe<ApplicationUpdateanswerInput>;
  status?: Maybe<String>;
}

export interface ApplicationUpdateanswerInput {
  set?: Maybe<String[] | String>;
}

export interface ApplicationUpsertWithWhereUniqueWithoutClubInput {
  where: ApplicationWhereUniqueInput;
  update: ApplicationUpdateWithoutClubDataInput;
  create: ApplicationCreateWithoutClubInput;
}

export interface ApplicationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ApplicationScalarWhereInput[] | ApplicationScalarWhereInput>;
  OR?: Maybe<ApplicationScalarWhereInput[] | ApplicationScalarWhereInput>;
  NOT?: Maybe<ApplicationScalarWhereInput[] | ApplicationScalarWhereInput>;
}

export interface ApplicationUpdateManyWithWhereNestedInput {
  where: ApplicationScalarWhereInput;
  data: ApplicationUpdateManyDataInput;
}

export interface ApplicationUpdateManyDataInput {
  answer?: Maybe<ApplicationUpdateanswerInput>;
  status?: Maybe<String>;
}

export interface UserUpdateManyWithoutClubsInput {
  create?: Maybe<UserCreateWithoutClubsInput[] | UserCreateWithoutClubsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutClubsInput[]
    | UserUpdateWithWhereUniqueWithoutClubsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutClubsInput[]
    | UserUpsertWithWhereUniqueWithoutClubsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutClubsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutClubsDataInput;
}

export interface UserUpdateWithoutClubsDataInput {
  email?: Maybe<String>;
  encryptedPassword?: Maybe<String>;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
  isMaster?: Maybe<ClubUpdateOneWithoutMasterInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  applications?: Maybe<ApplicationUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
}

export interface NotificationUpdateManyWithoutUserInput {
  create?: Maybe<
    NotificationCreateWithoutUserInput[] | NotificationCreateWithoutUserInput
  >;
  delete?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  set?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  disconnect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  update?: Maybe<
    | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    | NotificationUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    | NotificationUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    NotificationScalarWhereInput[] | NotificationScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotificationUpdateManyWithWhereNestedInput[]
    | NotificationUpdateManyWithWhereNestedInput
  >;
}

export interface NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput;
  data: NotificationUpdateWithoutUserDataInput;
}

export interface NotificationUpdateWithoutUserDataInput {
  content?: Maybe<String>;
  checked?: Maybe<Boolean>;
}

export interface NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput;
  update: NotificationUpdateWithoutUserDataInput;
  create: NotificationCreateWithoutUserInput;
}

export interface NotificationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  checked?: Maybe<Boolean>;
  checked_not?: Maybe<Boolean>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  OR?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  NOT?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
}

export interface NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput;
  data: NotificationUpdateManyDataInput;
}

export interface NotificationUpdateManyDataInput {
  content?: Maybe<String>;
  checked?: Maybe<Boolean>;
}

export interface ApplicationUpdateManyWithoutUserInput {
  create?: Maybe<
    ApplicationCreateWithoutUserInput[] | ApplicationCreateWithoutUserInput
  >;
  delete?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
  connect?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
  set?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
  disconnect?: Maybe<
    ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput
  >;
  update?: Maybe<
    | ApplicationUpdateWithWhereUniqueWithoutUserInput[]
    | ApplicationUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ApplicationUpsertWithWhereUniqueWithoutUserInput[]
    | ApplicationUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    ApplicationScalarWhereInput[] | ApplicationScalarWhereInput
  >;
  updateMany?: Maybe<
    | ApplicationUpdateManyWithWhereNestedInput[]
    | ApplicationUpdateManyWithWhereNestedInput
  >;
}

export interface ApplicationUpdateWithWhereUniqueWithoutUserInput {
  where: ApplicationWhereUniqueInput;
  data: ApplicationUpdateWithoutUserDataInput;
}

export interface ApplicationUpdateWithoutUserDataInput {
  club?: Maybe<ClubUpdateOneRequiredWithoutApplicationsInput>;
  answer?: Maybe<ApplicationUpdateanswerInput>;
  status?: Maybe<String>;
}

export interface ClubUpdateOneRequiredWithoutApplicationsInput {
  create?: Maybe<ClubCreateWithoutApplicationsInput>;
  update?: Maybe<ClubUpdateWithoutApplicationsDataInput>;
  upsert?: Maybe<ClubUpsertWithoutApplicationsInput>;
  connect?: Maybe<ClubWhereUniqueInput>;
}

export interface ClubUpdateWithoutApplicationsDataInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
  description?: Maybe<String>;
  logo?: Maybe<String>;
  type?: Maybe<String>;
  socialUrl?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
  clubImage?: Maybe<FileUpdateOneWithoutClubInput>;
  master?: Maybe<UserUpdateOneRequiredWithoutIsMasterInput>;
  questions?: Maybe<QuestionUpdateManyWithoutOwnerInput>;
  members?: Maybe<UserUpdateManyWithoutClubsInput>;
}

export interface UserUpdateOneRequiredWithoutIsMasterInput {
  create?: Maybe<UserCreateWithoutIsMasterInput>;
  update?: Maybe<UserUpdateWithoutIsMasterDataInput>;
  upsert?: Maybe<UserUpsertWithoutIsMasterInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutIsMasterDataInput {
  email?: Maybe<String>;
  encryptedPassword?: Maybe<String>;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  applications?: Maybe<ApplicationUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  clubs?: Maybe<ClubUpdateManyWithoutMembersInput>;
}

export interface RoomUpdateManyWithoutParticipantsInput {
  create?: Maybe<
    RoomCreateWithoutParticipantsInput[] | RoomCreateWithoutParticipantsInput
  >;
  delete?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  connect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  set?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  disconnect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  update?: Maybe<
    | RoomUpdateWithWhereUniqueWithoutParticipantsInput[]
    | RoomUpdateWithWhereUniqueWithoutParticipantsInput
  >;
  upsert?: Maybe<
    | RoomUpsertWithWhereUniqueWithoutParticipantsInput[]
    | RoomUpsertWithWhereUniqueWithoutParticipantsInput
  >;
  deleteMany?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
}

export interface RoomUpdateWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput;
  data: RoomUpdateWithoutParticipantsDataInput;
}

export interface RoomUpdateWithoutParticipantsDataInput {
  messages?: Maybe<MessageUpdateManyWithoutRoomInput>;
}

export interface MessageUpdateManyWithoutRoomInput {
  create?: Maybe<
    MessageCreateWithoutRoomInput[] | MessageCreateWithoutRoomInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutRoomInput[]
    | MessageUpdateWithWhereUniqueWithoutRoomInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutRoomInput[]
    | MessageUpsertWithWhereUniqueWithoutRoomInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutRoomDataInput;
}

export interface MessageUpdateWithoutRoomDataInput {
  text?: Maybe<String>;
  from?: Maybe<UserUpdateOneRequiredInput>;
  to?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  encryptedPassword?: Maybe<String>;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
  isMaster?: Maybe<ClubUpdateOneWithoutMasterInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  applications?: Maybe<ApplicationUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  clubs?: Maybe<ClubUpdateManyWithoutMembersInput>;
}

export interface ClubUpdateManyWithoutMembersInput {
  create?: Maybe<
    ClubCreateWithoutMembersInput[] | ClubCreateWithoutMembersInput
  >;
  delete?: Maybe<ClubWhereUniqueInput[] | ClubWhereUniqueInput>;
  connect?: Maybe<ClubWhereUniqueInput[] | ClubWhereUniqueInput>;
  set?: Maybe<ClubWhereUniqueInput[] | ClubWhereUniqueInput>;
  disconnect?: Maybe<ClubWhereUniqueInput[] | ClubWhereUniqueInput>;
  update?: Maybe<
    | ClubUpdateWithWhereUniqueWithoutMembersInput[]
    | ClubUpdateWithWhereUniqueWithoutMembersInput
  >;
  upsert?: Maybe<
    | ClubUpsertWithWhereUniqueWithoutMembersInput[]
    | ClubUpsertWithWhereUniqueWithoutMembersInput
  >;
  deleteMany?: Maybe<ClubScalarWhereInput[] | ClubScalarWhereInput>;
  updateMany?: Maybe<
    ClubUpdateManyWithWhereNestedInput[] | ClubUpdateManyWithWhereNestedInput
  >;
}

export interface ClubUpdateWithWhereUniqueWithoutMembersInput {
  where: ClubWhereUniqueInput;
  data: ClubUpdateWithoutMembersDataInput;
}

export interface ClubUpdateWithoutMembersDataInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
  description?: Maybe<String>;
  logo?: Maybe<String>;
  type?: Maybe<String>;
  socialUrl?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
  clubImage?: Maybe<FileUpdateOneWithoutClubInput>;
  master?: Maybe<UserUpdateOneRequiredWithoutIsMasterInput>;
  questions?: Maybe<QuestionUpdateManyWithoutOwnerInput>;
  applications?: Maybe<ApplicationUpdateManyWithoutClubInput>;
}

export interface ClubUpsertWithWhereUniqueWithoutMembersInput {
  where: ClubWhereUniqueInput;
  update: ClubUpdateWithoutMembersDataInput;
  create: ClubCreateWithoutMembersInput;
}

export interface ClubScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  logo?: Maybe<String>;
  logo_not?: Maybe<String>;
  logo_in?: Maybe<String[] | String>;
  logo_not_in?: Maybe<String[] | String>;
  logo_lt?: Maybe<String>;
  logo_lte?: Maybe<String>;
  logo_gt?: Maybe<String>;
  logo_gte?: Maybe<String>;
  logo_contains?: Maybe<String>;
  logo_not_contains?: Maybe<String>;
  logo_starts_with?: Maybe<String>;
  logo_not_starts_with?: Maybe<String>;
  logo_ends_with?: Maybe<String>;
  logo_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  socialUrl?: Maybe<String>;
  socialUrl_not?: Maybe<String>;
  socialUrl_in?: Maybe<String[] | String>;
  socialUrl_not_in?: Maybe<String[] | String>;
  socialUrl_lt?: Maybe<String>;
  socialUrl_lte?: Maybe<String>;
  socialUrl_gt?: Maybe<String>;
  socialUrl_gte?: Maybe<String>;
  socialUrl_contains?: Maybe<String>;
  socialUrl_not_contains?: Maybe<String>;
  socialUrl_starts_with?: Maybe<String>;
  socialUrl_not_starts_with?: Maybe<String>;
  socialUrl_ends_with?: Maybe<String>;
  socialUrl_not_ends_with?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
  socialDisplay_not?: Maybe<Boolean>;
  AND?: Maybe<ClubScalarWhereInput[] | ClubScalarWhereInput>;
  OR?: Maybe<ClubScalarWhereInput[] | ClubScalarWhereInput>;
  NOT?: Maybe<ClubScalarWhereInput[] | ClubScalarWhereInput>;
}

export interface ClubUpdateManyWithWhereNestedInput {
  where: ClubScalarWhereInput;
  data: ClubUpdateManyDataInput;
}

export interface ClubUpdateManyDataInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
  description?: Maybe<String>;
  logo?: Maybe<String>;
  type?: Maybe<String>;
  socialUrl?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface MessageUpsertWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutRoomDataInput;
  create: MessageCreateWithoutRoomInput;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface RoomUpsertWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput;
  update: RoomUpdateWithoutParticipantsDataInput;
  create: RoomCreateWithoutParticipantsInput;
}

export interface RoomScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  OR?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  NOT?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
}

export interface UserUpsertWithoutIsMasterInput {
  update: UserUpdateWithoutIsMasterDataInput;
  create: UserCreateWithoutIsMasterInput;
}

export interface ClubUpsertWithoutApplicationsInput {
  update: ClubUpdateWithoutApplicationsDataInput;
  create: ClubCreateWithoutApplicationsInput;
}

export interface ApplicationUpsertWithWhereUniqueWithoutUserInput {
  where: ApplicationWhereUniqueInput;
  update: ApplicationUpdateWithoutUserDataInput;
  create: ApplicationCreateWithoutUserInput;
}

export interface UserUpsertWithWhereUniqueWithoutClubsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutClubsDataInput;
  create: UserCreateWithoutClubsInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  encryptedPassword?: Maybe<String>;
  encryptedPassword_not?: Maybe<String>;
  encryptedPassword_in?: Maybe<String[] | String>;
  encryptedPassword_not_in?: Maybe<String[] | String>;
  encryptedPassword_lt?: Maybe<String>;
  encryptedPassword_lte?: Maybe<String>;
  encryptedPassword_gt?: Maybe<String>;
  encryptedPassword_gte?: Maybe<String>;
  encryptedPassword_contains?: Maybe<String>;
  encryptedPassword_not_contains?: Maybe<String>;
  encryptedPassword_starts_with?: Maybe<String>;
  encryptedPassword_not_starts_with?: Maybe<String>;
  encryptedPassword_ends_with?: Maybe<String>;
  encryptedPassword_not_ends_with?: Maybe<String>;
  Name?: Maybe<String>;
  Name_not?: Maybe<String>;
  Name_in?: Maybe<String[] | String>;
  Name_not_in?: Maybe<String[] | String>;
  Name_lt?: Maybe<String>;
  Name_lte?: Maybe<String>;
  Name_gt?: Maybe<String>;
  Name_gte?: Maybe<String>;
  Name_contains?: Maybe<String>;
  Name_not_contains?: Maybe<String>;
  Name_starts_with?: Maybe<String>;
  Name_not_starts_with?: Maybe<String>;
  Name_ends_with?: Maybe<String>;
  Name_not_ends_with?: Maybe<String>;
  studentNumber?: Maybe<String>;
  studentNumber_not?: Maybe<String>;
  studentNumber_in?: Maybe<String[] | String>;
  studentNumber_not_in?: Maybe<String[] | String>;
  studentNumber_lt?: Maybe<String>;
  studentNumber_lte?: Maybe<String>;
  studentNumber_gt?: Maybe<String>;
  studentNumber_gte?: Maybe<String>;
  studentNumber_contains?: Maybe<String>;
  studentNumber_not_contains?: Maybe<String>;
  studentNumber_starts_with?: Maybe<String>;
  studentNumber_not_starts_with?: Maybe<String>;
  studentNumber_ends_with?: Maybe<String>;
  studentNumber_not_ends_with?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  sex?: Maybe<String>;
  sex_not?: Maybe<String>;
  sex_in?: Maybe<String[] | String>;
  sex_not_in?: Maybe<String[] | String>;
  sex_lt?: Maybe<String>;
  sex_lte?: Maybe<String>;
  sex_gt?: Maybe<String>;
  sex_gte?: Maybe<String>;
  sex_contains?: Maybe<String>;
  sex_not_contains?: Maybe<String>;
  sex_starts_with?: Maybe<String>;
  sex_not_starts_with?: Maybe<String>;
  sex_ends_with?: Maybe<String>;
  sex_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  encryptedPassword?: Maybe<String>;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
}

export interface ClubUpsertWithoutMasterInput {
  update: ClubUpdateWithoutMasterDataInput;
  create: ClubCreateWithoutMasterInput;
}

export interface UserUpsertWithoutApplicationsInput {
  update: UserUpdateWithoutApplicationsDataInput;
  create: UserCreateWithoutApplicationsInput;
}

export interface ApplicationUpdateManyMutationInput {
  answer?: Maybe<ApplicationUpdateanswerInput>;
  status?: Maybe<String>;
}

export interface ClubCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  bio: String;
  description: String;
  logo?: Maybe<String>;
  type: String;
  socialUrl?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
  clubImage?: Maybe<FileCreateOneWithoutClubInput>;
  master: UserCreateOneWithoutIsMasterInput;
  questions?: Maybe<QuestionCreateManyWithoutOwnerInput>;
  applications?: Maybe<ApplicationCreateManyWithoutClubInput>;
  members?: Maybe<UserCreateManyWithoutClubsInput>;
}

export interface ClubUpdateInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
  description?: Maybe<String>;
  logo?: Maybe<String>;
  type?: Maybe<String>;
  socialUrl?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
  clubImage?: Maybe<FileUpdateOneWithoutClubInput>;
  master?: Maybe<UserUpdateOneRequiredWithoutIsMasterInput>;
  questions?: Maybe<QuestionUpdateManyWithoutOwnerInput>;
  applications?: Maybe<ApplicationUpdateManyWithoutClubInput>;
  members?: Maybe<UserUpdateManyWithoutClubsInput>;
}

export interface ClubUpdateManyMutationInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
  description?: Maybe<String>;
  logo?: Maybe<String>;
  type?: Maybe<String>;
  socialUrl?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
}

export interface FileCreateInput {
  id?: Maybe<ID_Input>;
  url: String;
  club: ClubCreateOneWithoutClubImageInput;
}

export interface ClubCreateOneWithoutClubImageInput {
  create?: Maybe<ClubCreateWithoutClubImageInput>;
  connect?: Maybe<ClubWhereUniqueInput>;
}

export interface ClubCreateWithoutClubImageInput {
  id?: Maybe<ID_Input>;
  name: String;
  bio: String;
  description: String;
  logo?: Maybe<String>;
  type: String;
  socialUrl?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
  master: UserCreateOneWithoutIsMasterInput;
  questions?: Maybe<QuestionCreateManyWithoutOwnerInput>;
  applications?: Maybe<ApplicationCreateManyWithoutClubInput>;
  members?: Maybe<UserCreateManyWithoutClubsInput>;
}

export interface FileUpdateInput {
  url?: Maybe<String>;
  club?: Maybe<ClubUpdateOneRequiredWithoutClubImageInput>;
}

export interface ClubUpdateOneRequiredWithoutClubImageInput {
  create?: Maybe<ClubCreateWithoutClubImageInput>;
  update?: Maybe<ClubUpdateWithoutClubImageDataInput>;
  upsert?: Maybe<ClubUpsertWithoutClubImageInput>;
  connect?: Maybe<ClubWhereUniqueInput>;
}

export interface ClubUpdateWithoutClubImageDataInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
  description?: Maybe<String>;
  logo?: Maybe<String>;
  type?: Maybe<String>;
  socialUrl?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
  master?: Maybe<UserUpdateOneRequiredWithoutIsMasterInput>;
  questions?: Maybe<QuestionUpdateManyWithoutOwnerInput>;
  applications?: Maybe<ApplicationUpdateManyWithoutClubInput>;
  members?: Maybe<UserUpdateManyWithoutClubsInput>;
}

export interface ClubUpsertWithoutClubImageInput {
  update: ClubUpdateWithoutClubImageDataInput;
  create: ClubCreateWithoutClubImageInput;
}

export interface FileUpdateManyMutationInput {
  url?: Maybe<String>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  from: UserCreateOneInput;
  to: UserCreateOneInput;
  room: RoomCreateOneWithoutMessagesInput;
}

export interface RoomCreateOneWithoutMessagesInput {
  create?: Maybe<RoomCreateWithoutMessagesInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  participants?: Maybe<UserCreateManyWithoutRoomsInput>;
}

export interface UserCreateManyWithoutRoomsInput {
  create?: Maybe<UserCreateWithoutRoomsInput[] | UserCreateWithoutRoomsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutRoomsInput {
  id?: Maybe<ID_Input>;
  email: String;
  encryptedPassword: String;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
  isMaster?: Maybe<ClubCreateOneWithoutMasterInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  applications?: Maybe<ApplicationCreateManyWithoutUserInput>;
  clubs?: Maybe<ClubCreateManyWithoutMembersInput>;
}

export interface MessageUpdateInput {
  text?: Maybe<String>;
  from?: Maybe<UserUpdateOneRequiredInput>;
  to?: Maybe<UserUpdateOneRequiredInput>;
  room?: Maybe<RoomUpdateOneRequiredWithoutMessagesInput>;
}

export interface RoomUpdateOneRequiredWithoutMessagesInput {
  create?: Maybe<RoomCreateWithoutMessagesInput>;
  update?: Maybe<RoomUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<RoomUpsertWithoutMessagesInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomUpdateWithoutMessagesDataInput {
  participants?: Maybe<UserUpdateManyWithoutRoomsInput>;
}

export interface UserUpdateManyWithoutRoomsInput {
  create?: Maybe<UserCreateWithoutRoomsInput[] | UserCreateWithoutRoomsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutRoomsInput[]
    | UserUpdateWithWhereUniqueWithoutRoomsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutRoomsInput[]
    | UserUpsertWithWhereUniqueWithoutRoomsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutRoomsDataInput;
}

export interface UserUpdateWithoutRoomsDataInput {
  email?: Maybe<String>;
  encryptedPassword?: Maybe<String>;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
  isMaster?: Maybe<ClubUpdateOneWithoutMasterInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  applications?: Maybe<ApplicationUpdateManyWithoutUserInput>;
  clubs?: Maybe<ClubUpdateManyWithoutMembersInput>;
}

export interface UserUpsertWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutRoomsDataInput;
  create: UserCreateWithoutRoomsInput;
}

export interface RoomUpsertWithoutMessagesInput {
  update: RoomUpdateWithoutMessagesDataInput;
  create: RoomCreateWithoutMessagesInput;
}

export interface MessageUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface NotificationCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutNotificationsInput;
  content: String;
  checked?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  email: String;
  encryptedPassword: String;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
  isMaster?: Maybe<ClubCreateOneWithoutMasterInput>;
  applications?: Maybe<ApplicationCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  clubs?: Maybe<ClubCreateManyWithoutMembersInput>;
}

export interface NotificationUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutNotificationsInput>;
  content?: Maybe<String>;
  checked?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  update?: Maybe<UserUpdateWithoutNotificationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutNotificationsDataInput {
  email?: Maybe<String>;
  encryptedPassword?: Maybe<String>;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
  isMaster?: Maybe<ClubUpdateOneWithoutMasterInput>;
  applications?: Maybe<ApplicationUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  clubs?: Maybe<ClubUpdateManyWithoutMembersInput>;
}

export interface UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput;
  create: UserCreateWithoutNotificationsInput;
}

export interface NotificationUpdateManyMutationInput {
  content?: Maybe<String>;
  checked?: Maybe<Boolean>;
}

export interface QuestionCreateInput {
  id?: Maybe<ID_Input>;
  owner: ClubCreateOneWithoutQuestionsInput;
  subject?: Maybe<String>;
  type?: Maybe<String>;
  options?: Maybe<QuestionCreateoptionsInput>;
}

export interface ClubCreateOneWithoutQuestionsInput {
  create?: Maybe<ClubCreateWithoutQuestionsInput>;
  connect?: Maybe<ClubWhereUniqueInput>;
}

export interface ClubCreateWithoutQuestionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  bio: String;
  description: String;
  logo?: Maybe<String>;
  type: String;
  socialUrl?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
  clubImage?: Maybe<FileCreateOneWithoutClubInput>;
  master: UserCreateOneWithoutIsMasterInput;
  applications?: Maybe<ApplicationCreateManyWithoutClubInput>;
  members?: Maybe<UserCreateManyWithoutClubsInput>;
}

export interface QuestionUpdateInput {
  owner?: Maybe<ClubUpdateOneRequiredWithoutQuestionsInput>;
  subject?: Maybe<String>;
  type?: Maybe<String>;
  options?: Maybe<QuestionUpdateoptionsInput>;
}

export interface ClubUpdateOneRequiredWithoutQuestionsInput {
  create?: Maybe<ClubCreateWithoutQuestionsInput>;
  update?: Maybe<ClubUpdateWithoutQuestionsDataInput>;
  upsert?: Maybe<ClubUpsertWithoutQuestionsInput>;
  connect?: Maybe<ClubWhereUniqueInput>;
}

export interface ClubUpdateWithoutQuestionsDataInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
  description?: Maybe<String>;
  logo?: Maybe<String>;
  type?: Maybe<String>;
  socialUrl?: Maybe<String>;
  socialDisplay?: Maybe<Boolean>;
  clubImage?: Maybe<FileUpdateOneWithoutClubInput>;
  master?: Maybe<UserUpdateOneRequiredWithoutIsMasterInput>;
  applications?: Maybe<ApplicationUpdateManyWithoutClubInput>;
  members?: Maybe<UserUpdateManyWithoutClubsInput>;
}

export interface ClubUpsertWithoutQuestionsInput {
  update: ClubUpdateWithoutQuestionsDataInput;
  create: ClubCreateWithoutQuestionsInput;
}

export interface QuestionUpdateManyMutationInput {
  subject?: Maybe<String>;
  type?: Maybe<String>;
  options?: Maybe<QuestionUpdateoptionsInput>;
}

export interface RoomCreateInput {
  id?: Maybe<ID_Input>;
  participants?: Maybe<UserCreateManyWithoutRoomsInput>;
  messages?: Maybe<MessageCreateManyWithoutRoomInput>;
}

export interface RoomUpdateInput {
  participants?: Maybe<UserUpdateManyWithoutRoomsInput>;
  messages?: Maybe<MessageUpdateManyWithoutRoomInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  encryptedPassword?: Maybe<String>;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
  isMaster?: Maybe<ClubUpdateOneWithoutMasterInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  applications?: Maybe<ApplicationUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  clubs?: Maybe<ClubUpdateManyWithoutMembersInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  encryptedPassword?: Maybe<String>;
  Name?: Maybe<String>;
  studentNumber?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  sex?: Maybe<String>;
}

export interface ApplicationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ApplicationWhereInput>;
  AND?: Maybe<
    ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput
  >;
  OR?: Maybe<
    ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput
  >;
}

export interface ClubSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClubWhereInput>;
  AND?: Maybe<ClubSubscriptionWhereInput[] | ClubSubscriptionWhereInput>;
  OR?: Maybe<ClubSubscriptionWhereInput[] | ClubSubscriptionWhereInput>;
  NOT?: Maybe<ClubSubscriptionWhereInput[] | ClubSubscriptionWhereInput>;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FileWhereInput>;
  AND?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  OR?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  NOT?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface NotificationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NotificationWhereInput>;
  AND?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  OR?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
}

export interface QuestionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuestionWhereInput>;
  AND?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
  OR?: Maybe<QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput>;
  NOT?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
}

export interface RoomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoomWhereInput>;
  AND?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
  OR?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
  NOT?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Application {
  id: ID_Output;
  answer: String[];
  status?: String;
  created: DateTimeOutput;
}

export interface ApplicationPromise extends Promise<Application>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  club: <T = ClubPromise>() => T;
  answer: () => Promise<String[]>;
  status: () => Promise<String>;
  created: () => Promise<DateTimeOutput>;
}

export interface ApplicationSubscription
  extends Promise<AsyncIterator<Application>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  club: <T = ClubSubscription>() => T;
  answer: () => Promise<AsyncIterator<String[]>>;
  status: () => Promise<AsyncIterator<String>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ApplicationNullablePromise
  extends Promise<Application | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  club: <T = ClubPromise>() => T;
  answer: () => Promise<String[]>;
  status: () => Promise<String>;
  created: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  email: String;
  encryptedPassword: String;
  Name?: String;
  studentNumber?: String;
  phoneNumber?: String;
  sex?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  encryptedPassword: () => Promise<String>;
  Name: () => Promise<String>;
  studentNumber: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  sex: () => Promise<String>;
  isMaster: <T = ClubPromise>() => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  applications: <T = FragmentableArray<Application>>(args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = FragmentableArray<Room>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  clubs: <T = FragmentableArray<Club>>(args?: {
    where?: ClubWhereInput;
    orderBy?: ClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  encryptedPassword: () => Promise<AsyncIterator<String>>;
  Name: () => Promise<AsyncIterator<String>>;
  studentNumber: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<String>>;
  isMaster: <T = ClubSubscription>() => T;
  notifications: <T = Promise<AsyncIterator<NotificationSubscription>>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  applications: <T = Promise<AsyncIterator<ApplicationSubscription>>>(args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = Promise<AsyncIterator<RoomSubscription>>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  clubs: <T = Promise<AsyncIterator<ClubSubscription>>>(args?: {
    where?: ClubWhereInput;
    orderBy?: ClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  encryptedPassword: () => Promise<String>;
  Name: () => Promise<String>;
  studentNumber: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  sex: () => Promise<String>;
  isMaster: <T = ClubPromise>() => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  applications: <T = FragmentableArray<Application>>(args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = FragmentableArray<Room>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  clubs: <T = FragmentableArray<Club>>(args?: {
    where?: ClubWhereInput;
    orderBy?: ClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Club {
  id: ID_Output;
  name: String;
  bio: String;
  description: String;
  logo?: String;
  type: String;
  socialUrl?: String;
  socialDisplay?: Boolean;
}

export interface ClubPromise extends Promise<Club>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  bio: () => Promise<String>;
  description: () => Promise<String>;
  logo: () => Promise<String>;
  type: () => Promise<String>;
  socialUrl: () => Promise<String>;
  socialDisplay: () => Promise<Boolean>;
  clubImage: <T = FilePromise>() => T;
  master: <T = UserPromise>() => T;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  applications: <T = FragmentableArray<Application>>(args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClubSubscription
  extends Promise<AsyncIterator<Club>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  logo: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  socialUrl: () => Promise<AsyncIterator<String>>;
  socialDisplay: () => Promise<AsyncIterator<Boolean>>;
  clubImage: <T = FileSubscription>() => T;
  master: <T = UserSubscription>() => T;
  questions: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  applications: <T = Promise<AsyncIterator<ApplicationSubscription>>>(args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClubNullablePromise
  extends Promise<Club | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  bio: () => Promise<String>;
  description: () => Promise<String>;
  logo: () => Promise<String>;
  type: () => Promise<String>;
  socialUrl: () => Promise<String>;
  socialDisplay: () => Promise<Boolean>;
  clubImage: <T = FilePromise>() => T;
  master: <T = UserPromise>() => T;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  applications: <T = FragmentableArray<Application>>(args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface File {
  id: ID_Output;
  url: String;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  club: <T = ClubPromise>() => T;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  club: <T = ClubSubscription>() => T;
}

export interface FileNullablePromise
  extends Promise<File | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  club: <T = ClubPromise>() => T;
}

export interface Question {
  id: ID_Output;
  subject?: String;
  type?: String;
  options: String[];
}

export interface QuestionPromise extends Promise<Question>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = ClubPromise>() => T;
  subject: () => Promise<String>;
  type: () => Promise<String>;
  options: () => Promise<String[]>;
}

export interface QuestionSubscription
  extends Promise<AsyncIterator<Question>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = ClubSubscription>() => T;
  subject: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  options: () => Promise<AsyncIterator<String[]>>;
}

export interface QuestionNullablePromise
  extends Promise<Question | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = ClubPromise>() => T;
  subject: () => Promise<String>;
  type: () => Promise<String>;
  options: () => Promise<String[]>;
}

export interface Notification {
  id: ID_Output;
  content: String;
  checked: Boolean;
  created: DateTimeOutput;
}

export interface NotificationPromise
  extends Promise<Notification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  content: () => Promise<String>;
  checked: () => Promise<Boolean>;
  created: () => Promise<DateTimeOutput>;
}

export interface NotificationSubscription
  extends Promise<AsyncIterator<Notification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  checked: () => Promise<AsyncIterator<Boolean>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NotificationNullablePromise
  extends Promise<Notification | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  content: () => Promise<String>;
  checked: () => Promise<Boolean>;
  created: () => Promise<DateTimeOutput>;
}

export interface Room {
  id: ID_Output;
}

export interface RoomPromise extends Promise<Room>, Fragmentable {
  id: () => Promise<ID_Output>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RoomSubscription
  extends Promise<AsyncIterator<Room>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  participants: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RoomNullablePromise
  extends Promise<Room | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Message {
  id: ID_Output;
  text: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  from: <T = UserPromise>() => T;
  to: <T = UserPromise>() => T;
  room: <T = RoomPromise>() => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  from: <T = UserSubscription>() => T;
  to: <T = UserSubscription>() => T;
  room: <T = RoomSubscription>() => T;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  from: <T = UserPromise>() => T;
  to: <T = UserPromise>() => T;
  room: <T = RoomPromise>() => T;
}

export interface ApplicationConnection {
  pageInfo: PageInfo;
  edges: ApplicationEdge[];
}

export interface ApplicationConnectionPromise
  extends Promise<ApplicationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ApplicationEdge>>() => T;
  aggregate: <T = AggregateApplicationPromise>() => T;
}

export interface ApplicationConnectionSubscription
  extends Promise<AsyncIterator<ApplicationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ApplicationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateApplicationSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ApplicationEdge {
  node: Application;
  cursor: String;
}

export interface ApplicationEdgePromise
  extends Promise<ApplicationEdge>,
    Fragmentable {
  node: <T = ApplicationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ApplicationEdgeSubscription
  extends Promise<AsyncIterator<ApplicationEdge>>,
    Fragmentable {
  node: <T = ApplicationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateApplication {
  count: Int;
}

export interface AggregateApplicationPromise
  extends Promise<AggregateApplication>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateApplicationSubscription
  extends Promise<AsyncIterator<AggregateApplication>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClubConnection {
  pageInfo: PageInfo;
  edges: ClubEdge[];
}

export interface ClubConnectionPromise
  extends Promise<ClubConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClubEdge>>() => T;
  aggregate: <T = AggregateClubPromise>() => T;
}

export interface ClubConnectionSubscription
  extends Promise<AsyncIterator<ClubConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClubEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClubSubscription>() => T;
}

export interface ClubEdge {
  node: Club;
  cursor: String;
}

export interface ClubEdgePromise extends Promise<ClubEdge>, Fragmentable {
  node: <T = ClubPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClubEdgeSubscription
  extends Promise<AsyncIterator<ClubEdge>>,
    Fragmentable {
  node: <T = ClubSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClub {
  count: Int;
}

export interface AggregateClubPromise
  extends Promise<AggregateClub>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClubSubscription
  extends Promise<AsyncIterator<AggregateClub>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NotificationConnection {
  pageInfo: PageInfo;
  edges: NotificationEdge[];
}

export interface NotificationConnectionPromise
  extends Promise<NotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotificationEdge>>() => T;
  aggregate: <T = AggregateNotificationPromise>() => T;
}

export interface NotificationConnectionSubscription
  extends Promise<AsyncIterator<NotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotificationSubscription>() => T;
}

export interface NotificationEdge {
  node: Notification;
  cursor: String;
}

export interface NotificationEdgePromise
  extends Promise<NotificationEdge>,
    Fragmentable {
  node: <T = NotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotificationEdgeSubscription
  extends Promise<AsyncIterator<NotificationEdge>>,
    Fragmentable {
  node: <T = NotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNotification {
  count: Int;
}

export interface AggregateNotificationPromise
  extends Promise<AggregateNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificationSubscription
  extends Promise<AsyncIterator<AggregateNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QuestionConnection {
  pageInfo: PageInfo;
  edges: QuestionEdge[];
}

export interface QuestionConnectionPromise
  extends Promise<QuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuestionEdge>>() => T;
  aggregate: <T = AggregateQuestionPromise>() => T;
}

export interface QuestionConnectionSubscription
  extends Promise<AsyncIterator<QuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionSubscription>() => T;
}

export interface QuestionEdge {
  node: Question;
  cursor: String;
}

export interface QuestionEdgePromise
  extends Promise<QuestionEdge>,
    Fragmentable {
  node: <T = QuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionEdgeSubscription
  extends Promise<AsyncIterator<QuestionEdge>>,
    Fragmentable {
  node: <T = QuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuestion {
  count: Int;
}

export interface AggregateQuestionPromise
  extends Promise<AggregateQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionSubscription
  extends Promise<AsyncIterator<AggregateQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoomConnection {
  pageInfo: PageInfo;
  edges: RoomEdge[];
}

export interface RoomConnectionPromise
  extends Promise<RoomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoomEdge>>() => T;
  aggregate: <T = AggregateRoomPromise>() => T;
}

export interface RoomConnectionSubscription
  extends Promise<AsyncIterator<RoomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoomSubscription>() => T;
}

export interface RoomEdge {
  node: Room;
  cursor: String;
}

export interface RoomEdgePromise extends Promise<RoomEdge>, Fragmentable {
  node: <T = RoomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoomEdgeSubscription
  extends Promise<AsyncIterator<RoomEdge>>,
    Fragmentable {
  node: <T = RoomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoom {
  count: Int;
}

export interface AggregateRoomPromise
  extends Promise<AggregateRoom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoomSubscription
  extends Promise<AsyncIterator<AggregateRoom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ApplicationSubscriptionPayload {
  mutation: MutationType;
  node: Application;
  updatedFields: String[];
  previousValues: ApplicationPreviousValues;
}

export interface ApplicationSubscriptionPayloadPromise
  extends Promise<ApplicationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ApplicationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ApplicationPreviousValuesPromise>() => T;
}

export interface ApplicationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ApplicationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ApplicationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ApplicationPreviousValuesSubscription>() => T;
}

export interface ApplicationPreviousValues {
  id: ID_Output;
  answer: String[];
  status?: String;
  created: DateTimeOutput;
}

export interface ApplicationPreviousValuesPromise
  extends Promise<ApplicationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  answer: () => Promise<String[]>;
  status: () => Promise<String>;
  created: () => Promise<DateTimeOutput>;
}

export interface ApplicationPreviousValuesSubscription
  extends Promise<AsyncIterator<ApplicationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  answer: () => Promise<AsyncIterator<String[]>>;
  status: () => Promise<AsyncIterator<String>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClubSubscriptionPayload {
  mutation: MutationType;
  node: Club;
  updatedFields: String[];
  previousValues: ClubPreviousValues;
}

export interface ClubSubscriptionPayloadPromise
  extends Promise<ClubSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClubPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClubPreviousValuesPromise>() => T;
}

export interface ClubSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClubSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClubSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClubPreviousValuesSubscription>() => T;
}

export interface ClubPreviousValues {
  id: ID_Output;
  name: String;
  bio: String;
  description: String;
  logo?: String;
  type: String;
  socialUrl?: String;
  socialDisplay?: Boolean;
}

export interface ClubPreviousValuesPromise
  extends Promise<ClubPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  bio: () => Promise<String>;
  description: () => Promise<String>;
  logo: () => Promise<String>;
  type: () => Promise<String>;
  socialUrl: () => Promise<String>;
  socialDisplay: () => Promise<Boolean>;
}

export interface ClubPreviousValuesSubscription
  extends Promise<AsyncIterator<ClubPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  logo: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  socialUrl: () => Promise<AsyncIterator<String>>;
  socialDisplay: () => Promise<AsyncIterator<Boolean>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface FilePreviousValues {
  id: ID_Output;
  url: String;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  text: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface NotificationSubscriptionPayload {
  mutation: MutationType;
  node: Notification;
  updatedFields: String[];
  previousValues: NotificationPreviousValues;
}

export interface NotificationSubscriptionPayloadPromise
  extends Promise<NotificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotificationPreviousValuesPromise>() => T;
}

export interface NotificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotificationPreviousValuesSubscription>() => T;
}

export interface NotificationPreviousValues {
  id: ID_Output;
  content: String;
  checked: Boolean;
  created: DateTimeOutput;
}

export interface NotificationPreviousValuesPromise
  extends Promise<NotificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  checked: () => Promise<Boolean>;
  created: () => Promise<DateTimeOutput>;
}

export interface NotificationPreviousValuesSubscription
  extends Promise<AsyncIterator<NotificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  checked: () => Promise<AsyncIterator<Boolean>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface QuestionSubscriptionPayload {
  mutation: MutationType;
  node: Question;
  updatedFields: String[];
  previousValues: QuestionPreviousValues;
}

export interface QuestionSubscriptionPayloadPromise
  extends Promise<QuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionPreviousValuesPromise>() => T;
}

export interface QuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionPreviousValuesSubscription>() => T;
}

export interface QuestionPreviousValues {
  id: ID_Output;
  subject?: String;
  type?: String;
  options: String[];
}

export interface QuestionPreviousValuesPromise
  extends Promise<QuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subject: () => Promise<String>;
  type: () => Promise<String>;
  options: () => Promise<String[]>;
}

export interface QuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subject: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  options: () => Promise<AsyncIterator<String[]>>;
}

export interface RoomSubscriptionPayload {
  mutation: MutationType;
  node: Room;
  updatedFields: String[];
  previousValues: RoomPreviousValues;
}

export interface RoomSubscriptionPayloadPromise
  extends Promise<RoomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoomPreviousValuesPromise>() => T;
}

export interface RoomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoomPreviousValuesSubscription>() => T;
}

export interface RoomPreviousValues {
  id: ID_Output;
}

export interface RoomPreviousValuesPromise
  extends Promise<RoomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface RoomPreviousValuesSubscription
  extends Promise<AsyncIterator<RoomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  encryptedPassword: String;
  Name?: String;
  studentNumber?: String;
  phoneNumber?: String;
  sex?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  encryptedPassword: () => Promise<String>;
  Name: () => Promise<String>;
  studentNumber: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  sex: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  encryptedPassword: () => Promise<AsyncIterator<String>>;
  Name: () => Promise<AsyncIterator<String>>;
  studentNumber: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Club",
    embedded: false
  },
  {
    name: "Room",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Question",
    embedded: false
  },
  {
    name: "Application",
    embedded: false
  },
  {
    name: "Notification",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
